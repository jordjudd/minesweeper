@using Minesweeper.Models
@model GameBoard

<h1>Minesweeper</h1>

<div class="game-info">
    <div class="difficulty-selector">
        <label for="difficultySelect">Difficulty:</label>
        <select id="difficultySelect" onchange="changeDifficulty()">
            <option value="Easy" selected="@(Model.CurrentDifficulty == Difficulty.Easy)">Easy (9x9, 10 mines)</option>
            <option value="Medium" selected="@(Model.CurrentDifficulty == Difficulty.Medium)">Medium (16x16, 40 mines)</option>
            <option value="Hard" selected="@(Model.CurrentDifficulty == Difficulty.Hard)">Hard (16x30, 99 mines)</option>
            <option value="Custom" selected="@(Model.CurrentDifficulty == Difficulty.Custom)">Custom</option>
        </select>
    </div>
    
    <div id="customSettings" style="display: @(Model.CurrentDifficulty == Difficulty.Custom ? "block" : "none"); margin-top: 10px;">
        <div style="display: inline-block; margin-right: 15px;">
            <label for="customRows">Rows:</label>
            <input type="number" id="customRows" min="5" max="30" value="@Model.Rows" style="width: 60px;">
        </div>
        <div style="display: inline-block; margin-right: 15px;">
            <label for="customCols">Cols:</label>
            <input type="number" id="customCols" min="5" max="50" value="@Model.Cols" style="width: 60px;">
        </div>
        <div style="display: inline-block; margin-right: 15px;">
            <label for="customMines">Mines:</label>
            <input type="number" id="customMines" min="1" max="999" value="@Model.MineCount" style="width: 60px;">
        </div>
        <button onclick="applyCustomSettings()" style="background-color: #4CAF50; color: white; padding: 5px 10px; border: none; border-radius: 3px;">Apply</button>
    </div>
    <div class="status" id="gameStatus">
        @if (Model.Status == GameStatus.Playing)
        {
            <span>Playing - Mines: @Model.MineCount | Flags: <span id="flagCount">@Model.GetFlagCount()</span></span>
        }
        else if (Model.Status == GameStatus.Won)
        {
            <span class="won">You Won! 🎉</span>
        }
        else if (Model.Status == GameStatus.Lost)
        {
            <span class="lost">Game Over 💥</span>
        }
    </div>
</div>

<div class="controls">
    <button onclick="newGameWithCurrentDifficulty()">New Game</button>
</div>

<div class="game-board" id="gameBoard">
    @for (int i = 0; i < Model.Rows; i++)
    {
        <div class="row">
            @for (int j = 0; j < Model.Cols; j++)
            {
                var cell = Model.Board[i][j];
                var cellClass = "cell";
                var cellContent = "";
                
                if (cell.IsRevealed)
                {
                    cellClass += " revealed";
                    if (cell.IsMine)
                    {
                        cellClass += " mine";
                        cellContent = "💣";
                    }
                    else if (cell.AdjacentMines > 0)
                    {
                        cellContent = cell.AdjacentMines.ToString();
                    }
                }
                else if (cell.IsFlagged)
                {
                    cellClass += " flagged";
                    cellContent = "🚩";
                }
                
                <div class="@cellClass" data-row="@i" data-col="@j" onclick="revealCell(@i, @j)" oncontextmenu="toggleFlag(@i, @j); return false;">
                    @cellContent
                </div>
            }
        </div>
    }
</div>

@section Scripts {
    <script>
        function revealCell(row, col) {
            // Don't allow clicks on revealed or flagged cells
            var cell = $('[data-row="' + row + '"][data-col="' + col + '"]');
            if (cell.hasClass('revealed') || cell.hasClass('flagged')) {
                return;
            }

            $.post('/Home/RevealCell', { row: row, col: col }, function(data) {
                if (data.success) {
                    console.log('Cell revealed:', data);
                    
                    // Update all revealed cells
                    if (data.revealedCells) {
                        console.log('Updating ' + data.revealedCells.length + ' cells');
                        
                        // Check for mines in the revealed cells (should be 0)
                        var minesInRevealedCells = data.revealedCells.filter(function(cell) {
                            return cell.isMine;
                        });
                        
                        if (minesInRevealedCells.length > 0) {
                            console.error('CRITICAL ERROR: Server sent mines in revealed cells!', minesInRevealedCells);
                        } else {
                            console.log('✅ Server correctly sent 0 mines in revealed cells');
                        }
                        
                        data.revealedCells.forEach(function(cellData) {
                            updateCellSafely(cellData.row, cellData.col, cellData);
                        });
                    }
                    
                    updateGameStatus(data.gameStatus);
                    
                    // If game is lost, show all mines
                    if (data.gameStatus === 'Lost' && data.allMines) {
                        console.log('Game lost, showing all mines:', data.allMines);
                        showAllMinesOnLoss(data.allMines);
                    }
                    
                    // If game is over, disable all clicks
                    if (data.gameStatus === 'Won' || data.gameStatus === 'Lost') {
                        $('.cell').css('pointer-events', 'none');
                    }
                } else {
                    console.error('Error:', data.error);
                    alert('Error: ' + data.error);
                }
            }).fail(function(xhr, status, error) {
                console.error('AJAX Error:', error);
                alert('Network error: ' + error);
            });
        }

        function toggleFlag(row, col) {
            console.log('toggleFlag called for cell:', row, col);
            
            $.post('/Home/ToggleFlag', { row: row, col: col }, function(data) {
                if (data.success) {
                    console.log('Flag toggled successfully:', data);
                    updateCellFlag(row, col, data.isFlagged);
                    updateGameStatus(data.gameStatus, @Model.MineCount, data.flagCount);
                } else {
                    console.error('Error:', data.error);
                    alert('Error: ' + data.error);
                }
            }).fail(function(xhr, status, error) {
                console.error('AJAX Error:', error);
                alert('Network error: ' + error);
            });
        }

        function newGame() {
            $.post('/Home/NewGame', function(data) {
                if (data.success) {
                    // Re-enable clicks and reload page for fresh game
                    $('.cell').css('pointer-events', 'auto');
                    location.reload();
                } else {
                    console.error('Error:', data.error);
                    alert('Error: ' + data.error);
                }
            }).fail(function(xhr, status, error) {
                console.error('AJAX Error:', error);
                alert('Network error: ' + error);
            });
        }

        function updateCellSafely(row, col, data) {
            var cell = $('[data-row="' + row + '"][data-col="' + col + '"]');
            
            // CRITICAL: Never display mines during cascade (server should never send them)
            if (data.isMine) {
                console.error('🚨 CRITICAL: Server sent a mine during cascade at (' + row + ',' + col + ')', data);
                return; // Don't update mine cells during cascade
            }
            
            if (data.isRevealed) {
                // Clear any previous styling first
                cell.removeClass('mine mine-debug flagged');
                cell.css({
                    'background-color': '',
                    'border': ''
                });
                
                // Add revealed styling
                cell.addClass('revealed');
                
                // Show numbers for safe cells (including 0)
                cell.text(data.adjacentMines);
                
                console.log('✅ Updated safe cell (' + row + ',' + col + ') with ' + data.adjacentMines + ' adjacent mines');
            }
        }

        // Keep the old function for compatibility
        function updateCell(row, col, data) {
            updateCellSafely(row, col, data);
        }

        function updateCellFlag(row, col, isFlagged) {
            var cell = $('[data-row="' + row + '"][data-col="' + col + '"]');
            
            if (isFlagged) {
                cell.addClass('flagged');
                cell.removeClass('revealed'); // Make sure it's not marked as revealed
                cell.text('🚩');
            } else {
                cell.removeClass('flagged');
                cell.text('');
            }
        }

        function updateGameStatus(status, mineCount, flagCount) {
            var statusElement = $('#gameStatus');
            mineCount = mineCount || @Model.MineCount;
            flagCount = flagCount !== undefined ? flagCount : parseInt($('#flagCount').text()) || 0;
            
            if (status === 'Won') {
                statusElement.html('<span class="won">You Won! 🎉</span>');
                showGameOver('🎉 Congratulations! You Won! 🎉', 'won');
            } else if (status === 'Lost') {
                statusElement.html('<span class="lost">Game Over 💥</span>');
                showGameOver('💥 Game Over! You hit a mine! 💥', 'lost');
            } else {
                statusElement.html('<span>Playing - Mines: ' + mineCount + ' | Flags: <span id="flagCount">' + flagCount + '</span></span>');
            }
        }

        function showGameOver(message, type) {
            $('#gameOverText').html(message);
            $('#gameOverMessage').removeClass('won lost').addClass(type);
            $('#gameOverOverlay').show();
            
            // Make the message draggable
            makeDraggable($('#gameOverMessage')[0]);
        }

        function hideGameOver() {
            $('#gameOverOverlay').hide();
        }

        function makeDraggable(element) {
            let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
            
            element.onmousedown = dragMouseDown;
            
            function dragMouseDown(e) {
                e = e || window.event;
                e.preventDefault();
                pos3 = e.clientX;
                pos4 = e.clientY;
                document.onmouseup = closeDragElement;
                document.onmousemove = elementDrag;
            }
            
            function elementDrag(e) {
                e = e || window.event;
                e.preventDefault();
                pos1 = pos3 - e.clientX;
                pos2 = pos4 - e.clientY;
                pos3 = e.clientX;
                pos4 = e.clientY;
                element.style.top = (element.offsetTop - pos2) + "px";
                element.style.left = (element.offsetLeft - pos1) + "px";
            }
            
            function closeDragElement() {
                document.onmouseup = null;
                document.onmousemove = null;
            }
        }

        function showAllMinesOnLoss(allMines) {
            // Show all mines when game is lost
            allMines.forEach(function(mine) {
                var cell = $('[data-row="' + mine.row + '"][data-col="' + mine.col + '"]');
                
                // Don't override the clicked mine (it should already be revealed)
                if (!cell.hasClass('revealed')) {
                    cell.addClass('revealed mine');
                    cell.text('💣');
                    cell.css({
                        'background-color': '#ffcccc',
                        'color': '#000'
                    });
                }
            });
        }

        function startNewGame() {
            hideGameOver();
            newGameWithCurrentDifficulty();
        }

        function changeDifficulty() {
            var difficulty = $('#difficultySelect').val();
            console.log('🎮 Difficulty changed to:', difficulty);
            
            // Show/hide custom settings
            if (difficulty === 'Custom') {
                $('#customSettings').show();
                console.log('📝 Showing custom settings');
            } else {
                $('#customSettings').hide();
                console.log('🚀 Starting new game with difficulty:', difficulty);
                // Start new game with selected difficulty
                startNewGameWithDifficulty(difficulty);
            }
        }

        function startNewGameWithDifficulty(difficulty) {
            console.log('📡 Redirecting to difficulty:', difficulty);
            // Redirect to Index with difficulty parameter instead of using AJAX
            window.location.href = '/Home/Index?difficulty=' + difficulty;
        }

        function applyCustomSettings() {
            var rows = parseInt($('#customRows').val());
            var cols = parseInt($('#customCols').val());
            var mines = parseInt($('#customMines').val());
            
            // Basic validation
            if (rows < 5 || rows > 30) {
                alert('Rows must be between 5 and 30');
                return;
            }
            if (cols < 5 || cols > 50) {
                alert('Columns must be between 5 and 50');
                return;
            }
            if (mines < 1 || mines >= (rows * cols * 0.8)) {
                alert('Mines must be between 1 and ' + Math.floor(rows * cols * 0.8));
                return;
            }
            
            // Redirect to Index with custom parameters
            window.location.href = '/Home/Index?difficulty=Custom&rows=' + rows + '&cols=' + cols + '&mines=' + mines;
        }

        function newGameWithCurrentDifficulty() {
            var difficulty = $('#difficultySelect').val();
            
            if (difficulty === 'Custom') {
                applyCustomSettings();
            } else {
                startNewGameWithDifficulty(difficulty);
            }
        }






    </script>
}