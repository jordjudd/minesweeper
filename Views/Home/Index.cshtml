@using Minesweeper.Models
@model GameBoard

<h1>Minesweeper</h1>

<div class="game-info">
    <div class="difficulty-selector">
        <label for="difficultySelect">Difficulty:</label>
        <select id="difficultySelect" onchange="changeDifficulty()">
            <option value="Easy" selected="@(Model.CurrentDifficulty == Difficulty.Easy)">Easy (9x9, 10 mines)</option>
            <option value="Medium" selected="@(Model.CurrentDifficulty == Difficulty.Medium)">Medium (16x16, 40 mines)</option>
            <option value="Hard" selected="@(Model.CurrentDifficulty == Difficulty.Hard)">Hard (16x30, 99 mines)</option>
        </select>
    </div>
    <div class="status" id="gameStatus">
        @if (Model.Status == GameStatus.Playing)
        {
            <span>Playing - Mines: @Model.MineCount</span>
        }
        else if (Model.Status == GameStatus.Won)
        {
            <span class="won">You Won! ðŸŽ‰</span>
        }
        else if (Model.Status == GameStatus.Lost)
        {
            <span class="lost">Game Over ðŸ’¥</span>
        }
    </div>
</div>

<div class="controls">
    <button onclick="newGameWithCurrentDifficulty()">New Game</button>
    <button onclick="debugBoard()" style="background-color: #ff9800;">Debug Board</button>
</div>

<div class="game-board" id="gameBoard">
    @for (int i = 0; i < Model.Rows; i++)
    {
        <div class="row">
            @for (int j = 0; j < Model.Cols; j++)
            {
                var cell = Model.Board[i, j];
                var cellClass = "cell";
                var cellContent = "";
                
                if (cell.IsRevealed)
                {
                    cellClass += " revealed";
                    if (cell.IsMine)
                    {
                        cellClass += " mine";
                        cellContent = "ðŸ’£";
                    }
                    else if (cell.AdjacentMines > 0)
                    {
                        cellContent = cell.AdjacentMines.ToString();
                    }
                }
                else if (cell.IsFlagged)
                {
                    cellClass += " flagged";
                    cellContent = "ðŸš©";
                }
                
                <div class="@cellClass" data-row="@i" data-col="@j" onclick="revealCell(@i, @j)" oncontextmenu="toggleFlag(@i, @j); return false;">
                    @cellContent
                </div>
            }
        </div>
    }
</div>

@section Scripts {
    <script>
        function revealCell(row, col) {
            // Don't allow clicks on revealed or flagged cells
            var cell = $('[data-row="' + row + '"][data-col="' + col + '"]');
            if (cell.hasClass('revealed') || cell.hasClass('flagged')) {
                return;
            }

            $.post('/Home/RevealCell', { row: row, col: col }, function(data) {
                if (data.success) {
                    console.log('Cell revealed:', data);
                    
                    // Update all revealed cells
                    if (data.revealedCells) {
                        data.revealedCells.forEach(function(cellData) {
                            updateCell(cellData.row, cellData.col, cellData);
                        });
                    }
                    
                    updateGameStatus(data.gameStatus);
                    
                    // If game is over, disable all clicks
                    if (data.gameStatus === 'Won' || data.gameStatus === 'Lost') {
                        $('.cell').css('pointer-events', 'none');
                    }
                } else {
                    console.error('Error:', data.error);
                    alert('Error: ' + data.error);
                }
            }).fail(function(xhr, status, error) {
                console.error('AJAX Error:', error);
                alert('Network error: ' + error);
            });
        }

        function toggleFlag(row, col) {
            $.post('/Home/ToggleFlag', { row: row, col: col }, function(data) {
                if (data.success) {
                    console.log('Flag toggled:', data);
                    updateCellFlag(row, col, data.isFlagged);
                    updateGameStatus(data.gameStatus);
                } else {
                    console.error('Error:', data.error);
                    alert('Error: ' + data.error);
                }
            }).fail(function(xhr, status, error) {
                console.error('AJAX Error:', error);
                alert('Network error: ' + error);
            });
        }

        function newGame() {
            $.post('/Home/NewGame', function(data) {
                if (data.success) {
                    // Re-enable clicks and reload page for fresh game
                    $('.cell').css('pointer-events', 'auto');
                    location.reload();
                } else {
                    console.error('Error:', data.error);
                    alert('Error: ' + data.error);
                }
            }).fail(function(xhr, status, error) {
                console.error('AJAX Error:', error);
                alert('Network error: ' + error);
            });
        }

        function updateCell(row, col, data) {
            var cell = $('[data-row="' + row + '"][data-col="' + col + '"]');
            
            if (data.isRevealed) {
                cell.addClass('revealed');
                cell.removeClass('flagged');
                
                if (data.isMine) {
                    cell.addClass('mine');
                    cell.text('ðŸ’£');
                } else if (data.adjacentMines > 0) {
                    cell.text(data.adjacentMines);
                } else {
                    cell.text('');
                }
            }
        }

        function updateCellFlag(row, col, isFlagged) {
            var cell = $('[data-row="' + row + '"][data-col="' + col + '"]');
            
            if (isFlagged) {
                cell.addClass('flagged');
                cell.text('ðŸš©');
            } else {
                cell.removeClass('flagged');
                cell.text('');
            }
        }

        function updateGameStatus(status, mineCount) {
            var statusElement = $('#gameStatus');
            mineCount = mineCount || @Model.MineCount;
            
            if (status === 'Won') {
                statusElement.html('<span class="won">You Won! ðŸŽ‰</span>');
                showGameOver('ðŸŽ‰ Congratulations! You Won! ðŸŽ‰', 'won');
            } else if (status === 'Lost') {
                statusElement.html('<span class="lost">Game Over ðŸ’¥</span>');
                showGameOver('ðŸ’¥ Game Over! You hit a mine! ðŸ’¥', 'lost');
            } else {
                statusElement.html('<span>Playing - Mines: ' + mineCount + '</span>');
            }
        }

        function showGameOver(message, type) {
            $('#gameOverText').html(message);
            $('#gameOverMessage').removeClass('won lost').addClass(type);
            $('#gameOverOverlay').css('display', 'flex');
        }

        function hideGameOver() {
            $('#gameOverOverlay').hide();
        }

        function startNewGame() {
            hideGameOver();
            newGameWithCurrentDifficulty();
        }

        function changeDifficulty() {
            var difficulty = $('#difficultySelect').val();
            window.location.href = '/?difficulty=' + difficulty;
        }

        function newGameWithCurrentDifficulty() {
            var difficulty = $('#difficultySelect').val();
            $.post('/Home/NewGame', { difficulty: difficulty }, function(data) {
                if (data.success) {
                    // Re-enable clicks and reload page for fresh game
                    $('.cell').css('pointer-events', 'auto');
                    window.location.href = '/?difficulty=' + difficulty;
                } else {
                    console.error('Error:', data.error);
                    alert('Error: ' + data.error);
                }
            }).fail(function(xhr, status, error) {
                console.error('AJAX Error:', error);
                alert('Network error: ' + error);
            });
        }

        function debugBoard() {
            $.get('/Home/GetBoardState', function(data) {
                if (data.success) {
                    console.log('Board State:', data);
                    console.log('Mine Positions:', data.minePositions);
                    
                    // Verify mine counting for a few cells
                    var verificationResults = [];
                    data.board.forEach(function(cell) {
                        if (!cell.isMine && cell.adjacentMines > 0) {
                            var actualCount = 0;
                            for (var i = -1; i <= 1; i++) {
                                for (var j = -1; j <= 1; j++) {
                                    var checkRow = cell.row + i;
                                    var checkCol = cell.col + j;
                                    var adjacentCell = data.board.find(c => c.row === checkRow && c.col === checkCol);
                                    if (adjacentCell && adjacentCell.isMine) {
                                        actualCount++;
                                    }
                                }
                            }
                            if (actualCount !== cell.adjacentMines) {
                                verificationResults.push({
                                    position: '(' + cell.row + ',' + cell.col + ')',
                                    expected: cell.adjacentMines,
                                    actual: actualCount
                                });
                            }
                        }
                    });
                    
                    console.log('Mine Count Verification:', verificationResults);
                    
                    var message = 'Difficulty: ' + data.difficulty + 
                                 ', Size: ' + data.rows + 'x' + data.cols + 
                                 ', Mines: ' + data.totalMines + '/' + data.expectedMines + 
                                 ', Initialized: ' + data.isInitialized;
                    
                    if (verificationResults.length > 0) {
                        message += '\n\nMine count errors found! Check console for details.';
                    } else {
                        message += '\n\nMine counting verification: PASSED';
                    }
                    
                    alert(message);
                } else {
                    console.error('Error:', data.error);
                    alert('Error: ' + data.error);
                }
            }).fail(function(xhr, status, error) {
                console.error('AJAX Error:', error);
                alert('Network error: ' + error);
            });
        }
    </script>
}